name: Dynamic Multi-App CI/CD
on:
  push:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

  detect-app-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper change detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: apps/*/**

      - name: Extract changed app directories
        id: set-matrix
        run: |
          # Define included apps - only these apps will be deployed
          INCLUDED_APPS=("atp-agent" "bridge-agent" "sophia-agent" "amm-near-agent")

          # Convert to JSON array for filtering
          INCLUDED_JSON=$(printf '%s\n' "${INCLUDED_APPS[@]}" | jq -R . | jq -s .)

          # Get all changed apps
          ALL_CHANGED_APPS=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep "^apps/" | awk -F'/' '{print $2}' | sort | uniq)

          # Filter to only include apps from our inclusion list
          FILTERED_APPS=$(echo "$ALL_CHANGED_APPS" | while read app; do
            if [[ -n "$app" ]]; then
              is_included=$(echo "$INCLUDED_JSON" | jq -c "index(\"$app\") != null")
              if [[ "$is_included" == "true" ]]; then
                echo "$app"
              else
                echo "Skipping app (not in inclusion list): $app" >&2
              fi
            fi
          done | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Detected changed apps (after filtering): $FILTERED_APPS"
          echo "matrix=$FILTERED_APPS" >> $GITHUB_OUTPUT

          # Set a flag to indicate if we have any app changes after filtering
          if [[ "$FILTERED_APPS" == "[]" ]]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: detect-app-changes
    if: needs.detect-app-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-app-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build
        env:
          WALLET_PRIVATE_KEY: ${{ matrix.app == 'atp-agent' && secrets.WALLET_PRIVATE_KEY_ATP || matrix.app == 'bridge-agent' && secrets.WALLET_PRIVATE_KEY_BRIDGE || secrets.WALLET_PRIVATE_KEY }}
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          TELEGRAM_CHAT_ID: ${{ matrix.app == 'atp-agent' && secrets.TELEGRAM_CHAT_ID_ATP || matrix.app == 'sophia-agent' && secrets.TELEGRAM_CHAT_ID_SOPHIA || secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ matrix.app == 'atp-agent' && secrets.TELEGRAM_BOT_TOKEN_ATP || matrix.app == 'sophia-agent' && secrets.TELEGRAM_BOT_TOKEN_SOPHIA || secrets.TELEGRAM_BOT_TOKEN }}
          SERVER_PORT: 3000
          USE_OPENAI_EMBEDDING: "TRUE"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEAR_ACCOUNT_ID: ${{ secrets.NEAR_ACCOUNT_ID }}
          NEAR_PRIVATE_KEY: ${{ secrets.NEAR_PRIVATE_KEY }}
          TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
          TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
          TWITTER_EMAIL: ${{ secrets.TWITTER_EMAIL }}
          TWITTER_DRY_RUN: "true" # Set to true for testing without posting
          MAX_TWEET_LENGTH: 280 # Default tweet length limit
          TWITTER_SEARCH_ENABLE: "false" # Enable search functionality
          TWITTER_RETRY_LIMIT: 5 # Login retry attempts
          TWITTER_POLL_INTERVAL: 60 # Poll interval in seconds
          # Post Generation Settings
          ENABLE_TWITTER_POST_GENERATION: "false"
          POST_INTERVAL_MIN: 360 # Minimum interval between posts (minutes)
          POST_INTERVAL_MAX: 380 # Maximum interval between posts (minutes)
          POST_IMMEDIATELY: "false" # Skip approval workflow
          # Action Processing
          ENABLE_ACTION_PROCESSING: "true"
          ACTION_INTERVAL: 5 # Action check interval (minutes)
          MAX_ACTIONS_PROCESSING: 1

  deploy:
    needs: [detect-app-changes, build]
    if: needs.detect-app-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-app-changes.outputs.matrix) }}
      fail-fast: false
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Deploy to Server ${{ matrix.app }}
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ matrix.app == 'atp-agent' && secrets.DIGITALOCEAN_HOST_ATP || matrix.app == 'bridge-agent' && secrets.DIGITALOCEAN_HOST_BRIDGE || matrix.app == 'amm-near-agent' && secrets.DIGITALOCEAN_HOST_AMM_NEAR || matrix.app == 'sophia-agent' && secrets.DIGITALOCEAN_HOST_SOPHIA }}
          username: ${{ secrets.DIGITALOCEAN_USER }}
          key: ${{ secrets.DIGITALOCEAN_PRIVATE_KEY }}
          port: ${{ secrets.DIGITALOCEAN_PORT }}
          script: |
            cd /home/ubuntu/brain-examples
            git fetch origin main
            git checkout origin/main -- apps/${{ matrix.app }}
            cd apps/${{ matrix.app }}

            cat > .env << EOF
            WALLET_PRIVATE_KEY=${{ matrix.app == 'atp-agent' && secrets.WALLET_PRIVATE_KEY_ATP || matrix.app == 'bridge-agent' && secrets.WALLET_PRIVATE_KEY_BRIDGE || matrix.app == 'sophia-agent' && secrets.WALLET_PRIVATE_KEY_SOPHIA || secrets.WALLET_PRIVATE_KEY }}
            WALLET_ADDRESS=${{ secrets.WALLET_ADDRESS }}
            TELEGRAM_CHAT_ID=${{ matrix.app == 'atp-agent' && secrets.TELEGRAM_CHAT_ID_ATP || matrix.app == 'sophia-agent' && secrets.TELEGRAM_CHAT_ID_SOPHIA || secrets.TELEGRAM_CHAT_ID }}
            TELEGRAM_BOT_TOKEN=${{ matrix.app == 'atp-agent' && secrets.TELEGRAM_BOT_TOKEN_ATP || matrix.app == 'sophia-agent' && secrets.TELEGRAM_BOT_TOKEN_SOPHIA || secrets.TELEGRAM_BOT_TOKEN }}
            SERVER_PORT=3000
            USE_OPENAI_EMBEDDING=TRUE
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            NEAR_ACCOUNT_ID=${{ secrets.NEAR_ACCOUNT_ID }}
            NEAR_PRIVATE_KEY=${{ secrets.NEAR_PRIVATE_KEY }}
            TWITTER_USERNAME=${{ secrets.TWITTER_USERNAME }}
            TWITTER_PASSWORD=${{ secrets.TWITTER_PASSWORD }}
            TWITTER_EMAIL=${{ secrets.TWITTER_EMAIL }}
            TWITTER_DRY_RUN=true      # Set to true for testing without posting
            MAX_TWEET_LENGTH=280       # Default tweet length limit
            TWITTER_SEARCH_ENABLE=false # Enable search functionality
            TWITTER_RETRY_LIMIT=5      # Login retry attempts
            TWITTER_POLL_INTERVAL=60  # Poll interval in seconds
            # Post Generation Settings
            ENABLE_TWITTER_POST_GENERATION=false
            POST_INTERVAL_MIN= 360       # Minimum interval between posts (minutes)
            POST_INTERVAL_MAX= 380 # Maximum interval between posts (minutes)
            POST_IMMEDIATELY=false     # Skip approval workflow
            # Action Processing
            ENABLE_ACTION_PROCESSING=true
            ACTION_INTERVAL=5          # Action check interval (minutes)
            MAX_ACTIONS_PROCESSING=1
            EOF

            chmod 600 .env

            if [ "${{ matrix.app }}" == "atp-agent" ] || [ "${{ matrix.app }}" == "bridge-agent" ]; then
              docker-compose down # Stop existing containers
              docker-compose up -d --build # Build and start containers
            else
              # Install pnpm and pm2 if they are not already installed
              if ! command -v pnpm &> /dev/null; then
                npm install -g pnpm
              fi
              if ! command -v pm2 &> /dev/null; then
                npm install -g pm2
              fi
              pnpm install
              pm2 restart ${{ matrix.app }}
            fi
